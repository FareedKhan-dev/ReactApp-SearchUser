{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/FixedMe.js","components/ErrorShow.js","containers/App.js","serviceWorker.js","index.js"],"names":["robot","props","id","name","email","className","src","alt","List","Data","map","data","Card","key","SearchBox","secondchange","onChange","type","placeholder","Fixed","style","margin","padding","overflowY","width","height","children","Error","state","error","info","this","setState","hasError","React","Component","Main","Searchchange","event","searchfield","target","value","fetch","then","Response","json","users","filterrobot","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kRAeeA,EAbD,SAACC,GAAW,IACjBC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OACE,yBAAKC,UAAU,wCACb,yBAAKC,IAAG,mCAA8BJ,EAA9B,YAA4CK,IAAI,YACxD,6BACE,2BAAIJ,GACJ,2BAAIC,MCJCI,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACpB,OACE,6BAEIA,EAAKC,KAAI,SAAAC,GACP,OAAO,kBAACC,EAAD,CAAMC,IAAKF,EAAKT,GAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCRlEU,EAAY,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACzB,OACE,6BACE,2BAAOC,SAAUD,EAAcE,KAAK,SAAUZ,UAAU,qBAAqBa,YAAY,aCDjFC,G,YAAQ,SAAClB,GACrB,OACE,yBAAKmB,MAAO,CAAEC,OAAO,EAAEC,QAAQ,EAAGC,UAAW,SAAUC,MAAO,MAAOC,OAAQ,UAC5ExB,EAAMyB,YCLEC,EAAb,kDACE,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACX,UAAY,GAHH,EADf,8DAOoBC,EAAOC,GACvBC,KAAKC,SAAS,CAACC,UAAU,MAR7B,+BAWI,OAAIF,KAAKH,MAAMK,SACN,qDAGAF,KAAK9B,MAAMyB,aAfxB,GAA2BQ,IAAMC,WCMpBC,EAAb,kDACE,aAAgB,IAAD,8BACb,gBAWFC,aAAe,SAACC,GACd,EAAKN,SAAS,CAACO,YAAcD,EAAME,OAAOC,SAX1C,EAAKb,MAAQ,CACX,KAAQ,GACR,YAAc,IAJH,EADjB,gEASwB,IAAD,OACnBc,MAAM,8CAA8CC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UAAUF,MAAK,SAAAG,GAAU,EAAKd,SAAS,CAACvB,KAAOqC,SAV1I,+BAiBW,IAAD,EACqBf,KAAKH,MAAzBnB,EADD,EACCA,KAAK8B,EADN,EACMA,YACNQ,EAAchB,KAAKH,MAAMnB,KAAKuC,QAAO,SAAAvC,GACzC,OAAQA,EAAKN,KAAK8C,cAAcC,SAASX,EAAYU,kBAEvD,OAAoB,IAAhBxC,EAAK0C,OACA,wBAAI9C,UAAU,MAAd,WAIL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKM,eAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAM5B,KAAMsC,WAhC1B,GAA0Bb,IAAMC,WCIZiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.b2ef9246.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst robot = (props) => {\r\n  const {id,name,email} = props;\r\n  return (\r\n    <div className=\"back dib bw tc shadow-5 pa3 ma3 grow\">\r\n      <img src={`https://picsum.photos/id/${id}/300/200`} alt=\"profile\"/>\r\n      <div>\r\n        <p>{name}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default robot;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nexport const List = ({Data}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        Data.map(data =>{\r\n          return <Card key={data.id} id={data.id} name={data.name} email={data.email} />\r\n        })\r\n      }\r\n      {/* <Card id={Data[0].id} name={Data[0].name} email={Data[0].email} />\r\n      <Card id={Data[1].id} name={Data[1].name} email={Data[1].email}/>\r\n      <Card id={Data[2].id} name={Data[2].name} email={Data[2].email}/>  */}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport const SearchBox = ({secondchange}) => {\r\n  return (\r\n    <div>\r\n      <input onChange={secondchange} type=\"search\"  className=\"SearchTerm ma3 pa3\" placeholder=\"Search\"/>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport './FixedMe.css';\r\n\r\n\r\nexport const  Fixed = (props) => {\r\n  return ( \r\n    <div style={{ margin:0,padding:0, overflowY: 'scroll', width: '99%', height: '410px'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport class Error extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      \"hasError\": false\r\n    }\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n  render(){\r\n    if (this.state.hasError) {\r\n      return <h1>Not fetching the data</h1>\r\n    }\r\n    else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}","import React from 'react';\nimport {List} from '../components/CardList';\n// import {Data} from './data';\nimport {SearchBox} from '../components/SearchBox';\nimport './App.css'\nimport { Fixed } from '../components/FixedMe';\nimport {Error} from '../components/ErrorShow';\n\nexport class Main extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      \"Data\": [],\n      \"searchfield\":''\n    };\n  }\n\n  componentDidMount () {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(Response => { return Response.json();}).then(users => {this.setState({Data : users });})\n  }\n\n  Searchchange = (event) =>{\n    this.setState({searchfield : event.target.value});\n  }\n\n  render(){\n    const {Data,searchfield} = this.state;\n    const filterrobot = this.state.Data.filter(Data => {\n      return (Data.name.toLowerCase().includes(searchfield.toLowerCase()))\n    })\n    if (Data.length === 0) {\n      return <h1 className='tc'>Loading</h1>\n    }\n    else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'> SEARCH  PICTURES ></h1>\n          <SearchBox secondchange = {this.Searchchange} />\n          <Fixed>\n            <Error>\n              <List Data={filterrobot} />\n            </Error>\n          </Fixed>\n        </div>\n      );\n    }\n  }\n    \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Main} from './containers/App';\n// import  {Good,Good2} from './Hello';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}